package vmx

type Vhardware struct {
	Version int    `vmx:"version,omitempty"`
	Compat  string `vmx:"productcompatibility,omitempty"`
}

type Ethernet struct {
	VMXID                string
	Address              string              `vmx:"address,omitempty"`
	GeneratedAddress     string              `vmx:"generatedaddress,omit"`
	StartConnected       bool                `vmx:"startconnected,omitempty"`
	Present              bool                `vmx:"present"`
	ConnectionType       string              `vmx:"connectiontype,omitempty"`
	VirtualDev           string              `vmx:"virtualdev,omitempty"`
	WakeOnPcktRcv        bool                `vmx:"wakeonpcktrcv,omitempty"`
	AddressType          EthernetAddressType `vmx:"addresstype,omitempty"`
	LinkStatePropagation bool                `vmx:"linkstatepropagation.enable,omitempty"`
	VNetwork             string              `vmx:"vnet,omitempty"`
}

type EthernetAddressType string

const (
	MAC_TYPE_STATIC    = "static"
	MAC_TYPE_GENERATED = "generated"
)

type Device struct {
	VMXID          string
	Present        bool   `vmx:"present"`
	Autodetect     bool   `vmx:"autodetect,omitempty"`
	StartConnected bool   `vmx:"startconnected,omitempty"`
	Type           string `vmx:"devicetype,omitempty"`
	Filename       string `vmxl:"filename,omitempty"`
}

type SATADevice struct {
	Device
}

type SCSIDevice struct {
	Device
	PCISlot    int    `vmx:"pcislotnumber,omitempty"`
	VirtualDev string `vmx:"virtualdev,omitempty"`
}

type IDEDevice struct {
	Device
}

type NVMEDevice struct {
	Device
}

type USBDevice struct {
	VMXID   string
	Present bool   `vmx:"present"`
	Speed   uint   `vmx:"speed,omitempty"`
	Type    string `vmx:"devicetype,omitempty"`
	Port    uint   `vmx:"port,omitempty"`
	Parent  string `vmx:"parent,omitempty"`
}

type PowerType struct {
	PowerOff string `vmx:"poweroff,omitempty"`
	PowerOn  string `vmx:"poweron,omitempty"`
	Reset    string `vmx:"reset,omitempty"`
	Suspend  string `vmx:"suspend,omitempty"`
}

type Sound struct {
	VMXID      string
	Present    bool   `vmx:"present"`
	Filename   string `vmx:"filename,omitempty"`
	Autodetect bool   `vmx:"autodetect,omitempty"`
}

type SerialPort struct {
	VMXID              string
	StartConnected     bool   `vmx:"startconnected,omitempty"`
	Present            bool   `vmx:"present"`
	Filetype           string `vmx:"filetype,omitempty"`
	Filename           string `vmx:"filename,omitempty"`
	Autodetect         bool   `vmx:"autodetect,omitempty"`
	TryNoRxLoss        bool   `vmx:"trynorxloss,omitempty"`
	PipeEndpoint       string `vmx:"pipe.endpoint,omitempty"`
	AllowGuestConnCtrl bool   `vmx:"allowguestconnectioncontrol,omitempty"`
	HardwareFlowCtrl   bool   `vmx:"hardwareFlowControl,omitempty"`
}

type PCIBridge struct {
	VMXID      string
	Present    bool   `vmx:"present"`
	VirtualDev string `vmx:"virtualdev,omitempty"`
	SlotNumber int    `vmx:"pcislotnumber,omitempty"`
	Functions  uint   `vmx:"functions,omitempty"`
}

type Tools struct {
	SyncTime      bool   `vmx:"synctime,omitempty"`
	UpgradePolicy string `vmx:"upgrade.policy,omitempty"`
	RemindInstall bool   `vmx:"remindinstall,omitempty"`
}

type UUID struct {
	Action string `vmx:"action,omitempty"`
	// Autogenerated, do not change
	Bios string `vmx:"bios,omitempty"`
	// Autogenerated, do not change
	Location string `vmx:"location,omitempty"`
}

type RemoteDisplay struct {
	VNCEnabled     bool   `vmx:"vnc.enabled,omitempty"`
	VNCPort        uint   `vmx:"vnc.port,omitempty"`
	VNCPassword    string `vmx:"vnc.password,omitempty"`
	VNCIPAddress   string `vmx:"vnc.ip,omitempty"`
	VNCKey         string `vmx:"vnc.key,omitempty"`
	VNCKeyMap      string `vmx:"vnc.keymap,omitempty"`
	VNCKeyMapFile  string `vmx:"vnc.keymapfile,omitempty"`
	VNCZlibLevel   uint   `vmx:"vnc.zliblevel,omitempty"`
	VNCWheelStep   string `vmx:"vncWheelStep,omitempty"`
	Depth          uint   `vmx:"depth,omitempty"`
	MaxConnections uint   `vmx:"maxconnections,omitempty"`
	MaxHeight      uint   `vmx:"maxheight,omitempty"`
	MaxWidth       uint   `vmx:"maxwidth,omitempty"`
}

type SharedFolder struct {
	VMXID       string
	Present     bool   `vmx:"present"`
	Enabled     bool   `vmx:"enabled,omitempty"`
	ReadAccess  bool   `vmx:"readaccess,omitempty"`
	WriteAccess bool   `vmx:"writeaccess,omitempty"`
	HostPath    string `vmx:"hostpath,omitempty"`
	GuestName   string `vmx:"guestname,omitempty"`
	Expiration  string `vmx:"expiration,omitempty"`
}

type GUI struct {
	ExitAtPowerOff      bool `vmx:"exitatpoweroff,omitempty"`
	FullScreenAtPowerOn bool `vmx:"fullscreenatpoweron,omitempty"`
	PowerOnAtStartup    bool `vmx:"poweronatstartup,omitempty"`
	ExitOnCLIHalt       bool `vmx:"exitonclihlt,omitempty"`
}

type Isolation struct {
	// Disable shared folders
	HgfsDisable      bool `vmx:"tools.hgfs.disable,omitempty"`
	CopyDisable      bool `vmx:"tools.copy.disable,omitempty"`
	PasteDisable     bool `vmx:"tools.paste.disable,omitempty"`
	DragNDropDisable bool `vmx:"tools.dnd.disable,omitempty"`
}

type FloppyDevice struct {
	VMXID          string
	Present        bool   `vmx:"present"`
	StartConnected bool   `vmx:"startconnected,omitempty"`
	Autodetect     bool   `vmx:"autodetect,omitempty"`
	Filename       string `vmx:"filename,omitempty"`
	Filetype       string `vmx:"filetype,omitempty"`
	GuestControl   bool   `vmx:"allowGuestConnectionControl,omitempty"`
}

type VMCI struct {
	VMXID string
	ID    string `vmx:"id,omitempty"`
	// We omit adding vmci.present = "false" since VMWare defaults it to TRUE
	// given that it increases IO performance between VMs in the same host
	Present bool `vmx:"present,omitempty"`
	PCISlot int  `vmx:"pcislotnumber,omitempty"`
}

type VMotion struct {
	CheckpointSize string `vmx:"checkpointFBSize,omitempty"`
}

type USB struct {
	Present            bool `vmx:"present"`
	GenericAutoconnect bool `vmx:"generic.autoconnect,omitempty"`
}

type RTC struct {
	DiffFromUTC int `vmx:"diffFromUTC"`
}

type BIOS struct {
	BootOrder string `vmx:"bootorder,omitempty"`
	HDDOrder  string `vmx:"hddorder,omitempty"`
}

type Config struct {
	Version string `vmx:"version,omitempty"`
}

type VirtualMachine struct {
	Encoding        string    `vmx:".encoding,omitempty"`
	ExtendedCfgFile string    `vmx:"extendedconfigfile,omitempty"`
	PowerType       PowerType `vmx:"powertype,omitempty"`
	Annotation      string    `vmx:"annotation,omitempty"`
	Vhardware       Vhardware `vmx:"virtualhw,omitempty"`
	Memsize         uint      `vmx:"memsize,omitempty"`
	NumvCPUs        uint      `vmx:"numvcpus,omitempty"`
	MemHotAdd       bool      `vmx:"mem.hotadd,omitempty"`
	VCPUHotAdd      bool      `vmx:"vcpu.hotadd,omitempty"`
	DisplayName     string    `vmx:"displayname,omitempty"`
	GuestOS         string    `vmx:"guestos,omitempty"`
	Autoanswer      bool      `vmx:"msg.autoanswer,omitempty"`
	Sound           Sound     `vmx:"sound,omitempty"`
	Tools           Tools     `vmx:"tools,omitempty"`
	NVRam           string    `vmx:"nvmram,omitempty"`
	UUID            UUID      `vmx:"uuid,omitempty"`
	CleanShutdown   bool      `vmx:"cleanshutdown,omitempty"`
	SoftPowerOff    bool      `vmx:"softpoweroff,omitempty"`
	VMCI            VMCI      `vmx:"vmci0,omitempty"`
	VMotion         VMotion   `vmx:"vmotion,omitempty"`
	USB             USB       `vmx:"usb,omitempty"`
	RTC             RTC       `vmx:"rtc,omitempty"`
	Config          Config    `vmx:"config"`
	// Enable or not nested virtualiation
	VHVEnable     bool           `vmx:"vhv.enable,omitempty"`
	RemoteDisplay RemoteDisplay  `vmx:"remotedisplay,omitempty"`
	Isolation     Isolation      `vmx:"isolation,omitempty"`
	SharedFolders []SharedFolder `vmx:"sharedfolder,omitempty"`
	PCIBridges    []PCIBridge    `vmx:"pcibridge,omitempty"`
	SerialPorts   []SerialPort   `vmx:"serial,omitempty"`
	Ethernet      []Ethernet     `vmx:"ethernet,omitempty"`
	IDEDevices    []IDEDevice    `vmx:"ide,omitempty"`
	SCSIDevices   []SCSIDevice   `vmx:"scsi,omitempty"`
	SATADevices   []SATADevice   `vmx:"sata,omitempty"`
	NVMEDevices   []NVMEDevice   `vmx:"nvme,omitempty"`
	USBDevices    []USBDevice    `vmx:"usb,omitempty"`
	FloppyDevices []FloppyDevice `vmx:"floppy,omitempty"`
}

// Bus type to use when attaching or detaching CD/DVD drives and disks.
type BusType string

// Disk controllers
const (
	IDE  BusType = "ide"
	SCSI BusType = "scsi"
	SATA BusType = "sata"
	NVME BusType = "nvme"
)

// CDROM device types
const (
	CDROM_IMAGE string = "cdrom-image"
	CDROM_RAW   string = "cdrom-raw"
)

// FindDevice executes the given function p on all the devices of one of the
// given types until one of the calls returns true.
// If no bus types are provided all will be used.
// FindDevice returns true only if one of the calls of p returned true.
func (vm VirtualMachine) FindDevice(p func(Device) bool, types ...BusType) bool {
	return vm.walkDevices(p, types...)
}

// WalkDevices executes the given function f on all the devices of one of the
// specified types.
// If no bus types are provided all will be used.
func (vm VirtualMachine) WalkDevices(f func(Device), types ...BusType) {
	p := func(d Device) bool { f(d); return false }
	vm.walkDevices(p, types...)
}

func (vm VirtualMachine) walkDevices(p func(Device) bool, types ...BusType) bool {
	if len(types) == 0 {
		types = []BusType{SATA, IDE, SCSI, NVME}
	}
	for _, t := range types {
		switch t {
		case SATA:
			for _, d := range vm.SATADevices {
				if p(d.Device) {
					return true
				}
			}
		case IDE:
			for _, d := range vm.IDEDevices {
				if p(d.Device) {
					return true
				}
			}
		case SCSI:
			for _, d := range vm.SCSIDevices {
				if p(d.Device) {
					return true
				}
			}
		case NVME:
			for _, d := range vm.NVMEDevices {
				if p(d.Device) {
					return true
				}
			}
		}
	}
	return false
}
